name: Deploy to Server

on:
  push:
    branches:
      - develop  # Change to your deployment branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Build Docker image
        run: docker build -t nestjs-docker .

      - name: Save Docker image to tar
        run: docker save nestjs-docker -o image.tar

      - name: Copy Docker image to server
        uses: appleboy/scp-action@v0.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "image.tar"
          target: "/home/your-username/image.tar"

      - name: SSH and Load Docker image on server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            script: |
            cd /UplinesBackend
            git checkout develop
            git pull origin develop
            docker load -i /home/your-username/image.tar
            docker stop your-container-name || true
            docker rm your-container-name || true
            docker build -t nestjs-docker .
            docker run -d --name your-container-name -p 3000:3000 nestjs-docker

#name: Test
#
#on:
#  push:
#    branches:
#      - develop
#  pull_request:
#    branches:
#      - develop
#env:
#  PRIVATE_KEY: ${{ secrets.SSH_KEY }}
#  HOSTNAME: ${{ secrets.SSH_HOST }}
#  USERNAME: ${{ secrets.SSH_USER }}
#  DATABASE_DBNAME: ${{ secrets.DATABASE_DBNAME }}
#  DATABASE_HOST: ${{ secrets.DATABASE_HOST }}
#  DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
#  DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
#  DATABASE_USER: ${{ secrets.DATABASE_USER }}
#
#jobs:
#  build:
#    timeout-minutes: 10
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
##      - name: Deploy application
##        run: |
##          touch .development.env
##          echo "DATABASE_DBNAME=${DATABASE_DBNAME}" >> .development.env
##          echo "DATABASE_HOST=${DATABASE_HOST}" >> .development.env
##          echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> .development.env
##          echo "DATABASE_PORT=${DATABASE_PORT}" >> .development.env
##          echo "DATABASE_USER=${DATABASE_USER}" >> .development.env
##
##      - name: Start containers
##        run: docker compose up
#
#      - name: Install node
#        uses: actions/setup-node@v1
#        with:
#          node-version: 16.x
#
#      - name: Install dependencies
#        run: npm install --legacy-peer-deps
#
#      - name: Run tests
#        run: npm run test
#
#
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Deploy application
#        run: |
#          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
#          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOSTNAME} '
#
#          cd /UplinesBackend &&
#          git checkout develop &&
#          git fetch --all &&
#          git reset --hard origin/develop &&
#          git pull origin develop &&
#          docker compose up -d --build
##name: Test Deployment
##
##on:
##  push:
##    branches: [ develop ]
##jobs:
##  build:
##    runs-on: self-hosted
##    steps:
##      - uses: actions/checkout@v3
##      - name: Build docker_compose
##        run: docker compose --env-file .development.env up -d --build
##      - name: Build application
##        run: docker compose exec -T service yarn build
##  deploy:
##    needs: build
##    runs-on: self-hosted
##    steps:
##      - uses: actions/checkout@v3
##      - name: Deploy application
##        env:
##          PRIVATE_KEY: ${{ secrets.SSH_KEY }}
##          HOSTNAME : ${{ secrets.SSH_HOST }}
##          USERNAME : ${{ secrets.SSH_USER }}
##          DATABASE_DBNAME : ${{ secrets.DATABASE_DBNAME }}
##          DATABASE_HOST : ${{ secrets.DATABASE_HOST }}
##          DATABASE_PASSWORD : ${{ secrets.DATABASE_PASSWORD }}
##          DATABASE_PORT : ${{ secrets.DATABASE_PORT }}
##          DATABASE_USER : ${{ secrets.DATABASE_USER }}
##        run: |
##          touch .development.env
##          echo "DATABASE_DBNAME=${DATABASE_DBNAME}" >> .development.env
##          echo "DATABASE_HOST=${DATABASE_HOST}" >> .development.env
##          echo "DATABASE_PASSWORD=${DATABASE_PASSWORD}" >> .development.env
##          echo "DATABASE_PORT=${DATABASE_PORT}" >> .development.env
##          echo "DATABASE_USER=${DATABASE_USER}" >> .development.env
##          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
##          ssh -o StrictHostKeyChecking=no -i private_key ${USERNAME}@${HOSTNAME} '
##
##          cd /UplinesBackend &&
##          git checkout develop &&
##          git fetch --all &&
##          git reset --hard origin/develop &&
##          git pull origin develop &&
##          docker compose up -d --build
